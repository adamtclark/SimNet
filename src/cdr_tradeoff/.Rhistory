covout<-matrix(nrow=niter, ncol=1)
for(i in 1:niter) {
smp<-sample(1:nrow(datsmp), smplst[j])
muout[i,]<-colMeans(datsm[smp,])
tmp<-cov(datsmp[smp,])[1:2]
varxout[i]<-tmp[1]
covout[i]<-tmp[2]
}
S_est[j]<-mean(covout)
C_est[j]<-mean(muout[,1]*muout[,2])
}
par(mar=c(4,5,3,3))
plot(range(smplst), c(-1, 1), ylab=expression(paste(italic(C)^0, "-", italic(C), ", or ", italic(S)^0, "-", italic(S))), xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=0, lty=3)
lines(smplst, S_est-0.5, pch=1, lty=2, type="b")
set.seed(180919)
niter<-5e3
smplst<-pmin(2^c(1:10), 1e3)
C_est<-S_est<-numeric(length(smplst))
datsmp<-as.matrix(dat)
for(j in 1:length(smplst)) {
muout<-matrix(nrow=niter, ncol=2)
varxout<-matrix(nrow=niter, ncol=1)
covout<-matrix(nrow=niter, ncol=1)
for(i in 1:niter) {
smp<-sample(1:nrow(datsmp), smplst[j])
muout[i,]<-colMeans(datsm[smp,])
tmp<-cov(datsmp[smp,])[1:2]
varxout[i]<-tmp[1]
covout[i]<-tmp[2]
}
S_est[j]<-mean(covout)
C_est[j]<-mean(muout[,1]*muout[,2])
}
par(mar=c(4,5,3,3))
plot(range(smplst), c(-1, 1), ylab=expression(paste(italic(C)^0, "-", italic(C), ", or ", italic(S)^0, "-", italic(S))), xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=0, lty=3)
lines(smplst, S_est-0.5, pch=1, lty=2, type="b")
mnrm
require(mvtnorm,quietly = TRUE)
set.seed(20180918)
dat<-data.frame(rmvnorm(1000,c(2,1), rbind(c(0.7, 0.5), c(0.5, 0.8))))
colnames(dat)<-c("x", "y")
mnrm<-abs(min(dat$x))
dat$x<-dat$x+mnrm #no negative monoculture biomass
C_true<-(2+mnrm)*(1)
S_true<-0.5
par(mar=c(4,4,3,3))
plot(y~x, dat, xlab=expression(italic(paste("M"))), ylab=expression(paste(Delta, "RY")), cex=0.8)
#slope = cov/var(x)
slp<-cov(dat$y, dat$x)/var(dat$x)
#intercept = mean(y)-mean(x)*(slope)
intc<-mean(dat$y)-cov(dat$y, dat$x)/var(dat$x)*mean(dat$x)
abline(a=intc, b=slp, lwd=2, col=4)
abline(v=mean(dat$x), h=mean(dat$y), lty=2)
text(mean(dat$x), max(dat$y)+range(max(dat$y))*0.17, expression(paste(italic(bar(M)))), xpd=NA)
text(max(dat$x)+range(max(dat$x))*0.1,mean(dat$y), expression(bar(paste(Delta, "RY"))), xpd=NA)
legend("bottomright", "OLS line", bty="n", lty=1, lwd=2, col=4)
abline(v=0, lty=3)
prd<-intc
arrows(0.5, -2, 0, prd, lwd=2, col=2, length = 0.1)
text(0.5, -2, expression(italic(paste(beta[0]))), col=2, pos = 4)
text(0.5, -2, expression(italic(paste(beta[0]))), col=2, pos = 4)
prd1<-intc+slp*1
prd2<-intc+slp*4
arrows(c(1,1), c(prd1,prd2), c(1,4), c(prd2,prd2), lwd=2, col=2, length = 0.1)
text(1, prd2, expression(italic(paste(beta[1]))), col=2, pos = 2)
plot(range(smplst), c(-1, 1), ylab=expression(paste("(", italic(C)^0, "-", italic(C), ")/N", ", or (", italic(S)^0, "-", italic(S), ")/N")), xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=0, lty=3)
lines(smplst, S_est-0.5, pch=1, lty=2, type="b")
S_true
C_true
C_est-C_true
C_est
C_true
colMeans(dat)
prod(colMeans(dat))
mean{dat[,1]}
mean(dat[,1])
mnrm
(2+mnrm)*1
colMeans(dat)
cor(dat)
cov(dat)[2]
require(mvtnorm,quietly = TRUE)
set.seed(20180918)
dat<-data.frame(rmvnorm(1000,c(2,1), rbind(c(0.7, 0.5), c(0.5, 0.8))))
colnames(dat)<-c("x", "y")
mnrm<-abs(min(dat$x))
dat$x<-dat$x+mnrm #no negative monoculture biomass
C_true<-sum(colMeans(dat))
S_true<-cov(dat)[2]
par(mar=c(4,4,3,3))
plot(y~x, dat, xlab=expression(italic(paste("M"))), ylab=expression(paste(Delta, "RY")), cex=0.8)
#slope = cov/var(x)
slp<-cov(dat$y, dat$x)/var(dat$x)
#intercept = mean(y)-mean(x)*(slope)
intc<-mean(dat$y)-cov(dat$y, dat$x)/var(dat$x)*mean(dat$x)
abline(a=intc, b=slp, lwd=2, col=4)
abline(v=mean(dat$x), h=mean(dat$y), lty=2)
text(mean(dat$x), max(dat$y)+range(max(dat$y))*0.17, expression(paste(italic(bar(M)))), xpd=NA)
text(max(dat$x)+range(max(dat$x))*0.1,mean(dat$y), expression(bar(paste(Delta, "RY"))), xpd=NA)
legend("bottomright", "OLS line", bty="n", lty=1, lwd=2, col=4)
abline(v=0, lty=3)
prd<-intc
arrows(0.5, -2, 0, prd, lwd=2, col=2, length = 0.1)
text(0.5, -2, expression(italic(paste(beta[0]))), col=2, pos = 4)
text(0.5, -2, expression(italic(paste(beta[0]))), col=2, pos = 4)
prd1<-intc+slp*1
prd2<-intc+slp*4
arrows(c(1,1), c(prd1,prd2), c(1,4), c(prd2,prd2), lwd=2, col=2, length = 0.1)
text(1, prd2, expression(italic(paste(beta[1]))), col=2, pos = 2)
par(mar=c(4,4,3,3))
plot(y~x, dat, xlab=expression(italic(paste("M"))), ylab=expression(paste(Delta, "RY")), cex=0.8, col="grey")
abline(a=intc, b=slp, lwd=2, col=4)
abline(v=mean(dat$x), h=mean(dat$y), lty=2)
text(mean(dat$x), max(dat$y)+range(max(dat$y))*0.17, expression(paste(italic(bar(M)))), xpd=NA)
text(max(dat$x)+range(max(dat$x))*0.1,mean(dat$y)-0.1, expression(bar(paste(Delta, "RY"))), xpd=NA)
set.seed(171956)
smp<-sample(1:nrow(dat), 5)
muout<-colMeans(dat[smp,])
tmp<-cov(dat[smp,])[1:2]
varxout<-tmp[1]
covout<-tmp[2]
slp_est<-covout/varxout
intc_est<-muout[2]-covout/varxout*muout[1]
abline(a=intc_est, b=slp_est, col=2, lty=2, lwd=2)
abline(v=mean(muout[1]), h=mean(muout[2]), col=2, lty=2)
text(mean(muout[1]), max(dat$y)+range(max(dat$y))*0.17, expression(paste(italic(bar(M^O)))), xpd=NA, col=2)
text(max(dat$x)+range(max(dat$x))*0.1,mean(muout[2])-0.1, expression(bar(paste(Delta, "RY"^O))), xpd=NA, col=2)
points(datsm[smp,], col=2, cex=0.8)
legend("bottomright", c("true OLS", "sample OLS"), bty="n", lty=c(1,2), lwd=2, col=c(4,2))
set.seed(180919)
niter<-5e3
smplst<-pmin(2^c(1:10), 1e3)
C_est<-S_est<-numeric(length(smplst))
datsmp<-as.matrix(dat)
for(j in 1:length(smplst)) {
muout<-matrix(nrow=niter, ncol=2)
varxout<-matrix(nrow=niter, ncol=1)
covout<-matrix(nrow=niter, ncol=1)
for(i in 1:niter) {
smp<-sample(1:nrow(datsmp), smplst[j])
muout[i,]<-colMeans(datsm[smp,])
tmp<-cov(datsmp[smp,])[1:2]
varxout[i]<-tmp[1]
covout[i]<-tmp[2]
}
S_est[j]<-mean(covout)
C_est[j]<-mean(muout[,1]*muout[,2])
}
par(mar=c(4,5,3,3))
plot(range(smplst), c(-1, 1), ylab=expression(paste("(", italic(C)^0, "-", italic(C), ")/N", ", or (", italic(S)^0, "-", italic(S), ")/N")), xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=0, lty=3)
lines(smplst, S_est-S_true, pch=1, lty=2, type="b")
lines(smplst, C_est-C_true, pch=1, lty=2, type="b")
C_est
C_true
colMeans(dat)
C_true<-prod(colMeans(dat))
set.seed(180919)
niter<-5e3
smplst<-pmin(2^c(1:10), 1e3)
C_est<-S_est<-numeric(length(smplst))
datsmp<-as.matrix(dat)
for(j in 1:length(smplst)) {
muout<-matrix(nrow=niter, ncol=2)
varxout<-matrix(nrow=niter, ncol=1)
covout<-matrix(nrow=niter, ncol=1)
for(i in 1:niter) {
smp<-sample(1:nrow(datsmp), smplst[j])
muout[i,]<-colMeans(datsm[smp,])
tmp<-cov(datsmp[smp,])[1:2]
varxout[i]<-tmp[1]
covout[i]<-tmp[2]
}
S_est[j]<-mean(covout)
C_est[j]<-mean(muout[,1]*muout[,2])
}
par(mar=c(4,5,3,3))
plot(range(smplst), c(-1, 1), ylab=expression(paste("(", italic(C)^0, "-", italic(C), ")/N", ", or (", italic(S)^0, "-", italic(S), ")/N")), xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=0, lty=3)
lines(smplst, S_est-S_true, pch=1, lty=2, type="b")
lines(smplst, C_est-C_true, pch=1, lty=2, type="b")
C_est-C_true
plot(range(smplst), c(0, 0.25), ylab=expression(paste("(", italic(C)^0, "-", italic(C), ")/N", ", or (", italic(S)^0, "-", italic(S), ")/N")), xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=0, lty=3)
lines(smplst, S_est-S_true, pch=1, lty=2, type="b")
lines(smplst, C_est-C_true, pch=1, lty=2, type="b")
plot(range(smplst), c(-0.05, 0.25), ylab=expression(paste("(", italic(C)^0, "-", italic(C), ")/N", ", or (", italic(S)^0, "-", italic(S), ")/N")), xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=0, lty=3)
lines(smplst, S_est-S_true, pch=1, lty=2, type="b")
lines(smplst, C_est-C_true, pch=2, lty=2, type="b")
set.seed(180919)
niter<-1e4
smplst<-pmin(2^c(1:10), 1e3)
C_est<-S_est<-numeric(length(smplst))
datsmp<-as.matrix(dat)
for(j in 1:length(smplst)) {
muout<-matrix(nrow=niter, ncol=2)
varxout<-matrix(nrow=niter, ncol=1)
covout<-matrix(nrow=niter, ncol=1)
for(i in 1:niter) {
smp<-sample(1:nrow(datsmp), smplst[j])
muout[i,]<-colMeans(datsm[smp,])
tmp<-cov(datsmp[smp,])[1:2]
varxout[i]<-tmp[1]
covout[i]<-tmp[2]
}
S_est[j]<-mean(covout)
C_est[j]<-mean(muout[,1]*muout[,2])
}
par(mar=c(4,5,3,3))
plot(range(smplst), c(-0.05, 0.25), ylab=expression(paste("(", italic(C)^0, "-", italic(C), ")/N", ", or (", italic(S)^0, "-", italic(S), ")/N")), xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=0, lty=3)
lines(smplst, S_est-S_true, pch=1, lty=2, type="b")
lines(smplst, C_est-C_true, pch=2, lty=2, type="b")
plot(range(smplst), c(-0.05, 0.25), ylab=expression(paste("(", italic(C)^0, "-", italic(C), ")/N", ", or (", italic(S)^0, "-", italic(S), ")/N")), xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=0, lty=3)
lines(smplst, S_est-S_true, pch=1, lty=1, type="b")
lines(smplst, C_est-C_true, pch=2, lty=2, type="b")
plot(range(smplst), c(-0.005, 0.25), ylab=expression(paste("(", italic(C)^0, "-", italic(C), ")/N", ", or (", italic(S)^0, "-", italic(S), ")/N")), xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=0, lty=3)
lines(smplst, S_est-S_true, pch=1, lty=1, type="b")
lines(smplst, C_est-C_true, pch=2, lty=2, type="b")
cov(dat)
cov(dat)[2]
cov(dat)[2]*(1/smplst)
lines(smplst, cov(dat)[2]*(1/smplst), lty=1, col=1)
plot(range(smplst), c(-0.005, 0.25), ylab=expression(paste("(", italic(C)^0, "-", italic(C), ")/N", ", or (", italic(S)^0, "-", italic(S), ")/N")), xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=0, lty=3)
lines(smplst, cov(dat)[2]*(1/smplst), lty=1, col=2, lwd=2)
lines(smplst, S_est-S_true, pch=1, lty=1, type="b")
lines(smplst, C_est-C_true, pch=2, lty=2, type="b")
plot(range(smplst), c(-0.005, 0.25), ylab=expression(paste("(", italic(C)^0, "-", italic(C), ")/N", ", or (", italic(S)^0, "-", italic(S), ")/N")), xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=0, lty=3)
smpsq<-seq(2, 1000)
lines(smpsq, cov(dat)[2]*(1/smpsq), lty=1, col=2, lwd=2)
lines(smplst, S_est-S_true, pch=1, lty=1, type="b")
lines(smplst, C_est-C_true, pch=2, lty=2, type="b")
aplot(range(smplst), c(-0.005, 0.25), ylab=expression(paste("(", italic(C)^0, "-", italic(C), ")/N", ", or (", italic(S)^0, "-", italic(S), ")/N")), xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=0, lty=3)
smpsq<-exp(seq(log(2), log(1000), length=1000))
lines(smpsq, cov(dat)[2]*(1/smpsq), lty=1, col=2, lwd=2)
lines(smplst, S_est-S_true, pch=1, lty=1, type="b")
lines(smplst, C_est-C_true, pch=2, lty=2, type="b")
plot(range(smplst), c(-0.005, 0.25), ylab=expression(paste("(", italic(C)^0, "-", italic(C), ")/N", ", or (", italic(S)^0, "-", italic(S), ")/N")), xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=0, lty=3)
smpsq<-exp(seq(log(2), log(1000), length=1000))
lines(smpsq, cov(dat)[2]*(1/smpsq), lty=1, col=2, lwd=2)
lines(smplst, S_est-S_true, pch=1, lty=1, type="b")
lines(smplst, C_est-C_true, pch=2, lty=2, type="b")
legend("topright", c(expression(italic(paste("S"))),expression(paste(italic("C"))), expression(paste("Cov", "/", italic(N)))), bty="n", lty=c(1,2,1), pch=c(1,2,NA), col=c(1,1,2))
rm(list=ls)()
rm(list=ls())
par(mar=c(4,5,3,3))
plot(range(smplst), c(-0.005, 0.25), ylab="sample vs. true", xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=0, lty=3)
smpsq<-exp(seq(log(2), log(1000), length=1000))
lines(smpsq, cov(dat)[2]*(1/smpsq), lty=1, col=2, lwd=2)
lines(smplst, S_est-S_true, pch=1, lty=1, type="b")
lines(smplst, C_est-C_true, pch=2, lty=2, type="b")
legend("topright", c(expression(italic(paste("S"))),expression(paste(italic("C"))), expression(paste("Cov", "/", italic(N)))), bty="n", lty=c(1,2,1), pch=c(1,2,NA), col=c(1,1,2))
require(mvtnorm,quietly = TRUE)
set.seed(20180918)
dat<-data.frame(rmvnorm(1000,c(2,1), rbind(c(0.7, 0.5), c(0.5, 0.8))))
colnames(dat)<-c("x", "y")
mnrm<-abs(min(dat$x))
dat$x<-dat$x+mnrm #no negative monoculture biomass
C_true<-prod(colMeans(dat))
S_true<-cov(dat)[2]
par(mar=c(4,4,3,3))
plot(y~x, dat, xlab=expression(italic(paste("M"))), ylab=expression(paste(Delta, "RY")), cex=0.8)
#slope = cov/var(x)
slp<-cov(dat$y, dat$x)/var(dat$x)
#intercept = mean(y)-mean(x)*(slope)
intc<-mean(dat$y)-cov(dat$y, dat$x)/var(dat$x)*mean(dat$x)
abline(a=intc, b=slp, lwd=2, col=4)
abline(v=mean(dat$x), h=mean(dat$y), lty=2)
text(mean(dat$x), max(dat$y)+range(max(dat$y))*0.17, expression(paste(italic(bar(M)))), xpd=NA)
text(max(dat$x)+range(max(dat$x))*0.1,mean(dat$y), expression(bar(paste(Delta, "RY"))), xpd=NA)
legend("bottomright", "OLS line", bty="n", lty=1, lwd=2, col=4)
abline(v=0, lty=3)
prd<-intc
arrows(0.5, -2, 0, prd, lwd=2, col=2, length = 0.1)
text(0.5, -2, expression(italic(paste(beta[0]))), col=2, pos = 4)
text(0.5, -2, expression(italic(paste(beta[0]))), col=2, pos = 4)
prd1<-intc+slp*1
prd2<-intc+slp*4
arrows(c(1,1), c(prd1,prd2), c(1,4), c(prd2,prd2), lwd=2, col=2, length = 0.1)
text(1, prd2, expression(italic(paste(beta[1]))), col=2, pos = 2)
par(mar=c(4,4,3,3))
plot(y~x, dat, xlab=expression(italic(paste("M"))), ylab=expression(paste(Delta, "RY")), cex=0.8, col="grey")
abline(a=intc, b=slp, lwd=2, col=4)
abline(v=mean(dat$x), h=mean(dat$y), lty=2)
text(mean(dat$x), max(dat$y)+range(max(dat$y))*0.17, expression(paste(italic(bar(M)))), xpd=NA)
text(max(dat$x)+range(max(dat$x))*0.1,mean(dat$y)-0.1, expression(bar(paste(Delta, "RY"))), xpd=NA)
set.seed(171956)
smp<-sample(1:nrow(dat), 5)
muout<-colMeans(dat[smp,])
tmp<-cov(dat[smp,])[1:2]
varxout<-tmp[1]
covout<-tmp[2]
slp_est<-covout/varxout
intc_est<-muout[2]-covout/varxout*muout[1]
abline(a=intc_est, b=slp_est, col=2, lty=2, lwd=2)
abline(v=mean(muout[1]), h=mean(muout[2]), col=2, lty=2)
text(mean(muout[1]), max(dat$y)+range(max(dat$y))*0.17, expression(paste(italic(bar(M^O)))), xpd=NA, col=2)
text(max(dat$x)+range(max(dat$x))*0.1,mean(muout[2])-0.1, expression(bar(paste(Delta, "RY"^O))), xpd=NA, col=2)
points(dat[smp,], col=2, cex=0.8)
legend("bottomright", c("true OLS", "sample OLS"), bty="n", lty=c(1,2), lwd=2, col=c(4,2))
set.seed(180919)
niter<-1e4
smplst<-pmin(2^c(1:10), 1e3)
C_est<-S_est<-numeric(length(smplst))
datsmp<-as.matrix(dat)
for(j in 1:length(smplst)) {
muout<-matrix(nrow=niter, ncol=2)
varxout<-matrix(nrow=niter, ncol=1)
covout<-matrix(nrow=niter, ncol=1)
for(i in 1:niter) {
smp<-sample(1:nrow(datsmp), smplst[j])
muout[i,]<-colMeans(datsmp[smp,])
tmp<-cov(datsmp[smp,])[1:2]
varxout[i]<-tmp[1]
covout[i]<-tmp[2]
}
S_est[j]<-mean(covout)
C_est[j]<-mean(muout[,1]*muout[,2])
}
par(mar=c(4,5,3,3))
plot(range(smplst), c(-0.005, 0.25), ylab="sample vs. true", xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=0, lty=3)
smpsq<-exp(seq(log(2), log(1000), length=1000))
lines(smpsq, cov(dat)[2]*(1/smpsq), lty=1, col=2, lwd=2)
lines(smplst, S_est-S_true, pch=1, lty=1, type="b")
lines(smplst, C_est-C_true, pch=2, lty=2, type="b")
legend("topright", c(expression(italic(paste("S"))),expression(paste(italic("C"))), expression(paste("Cov", "/", italic(N)))), bty="n", lty=c(1,2,1), pch=c(1,2,NA), col=c(1,1,2))
S_est/S_true
C_est/C_tru
C_est/C_true
plot(range(smplst), c(0.99, 1.1), ylab="sample/true", xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=1, lty=3)
smpsq<-exp(seq(log(2), log(1000), length=1000))
lines(smpsq, cov(dat)[2]*(1/smpsq), lty=1, col=2, lwd=2)
lines(smplst, S_est/S_true, pch=1, lty=1, type="b")
lines(smplst, C_est/C_true, pch=2, lty=2, type="b")
legend("topright", c(expression(italic(paste("S"))),expression(paste(italic("C"))), expression(paste("Cov", "/", italic(N)))), bty="n", lty=c(1,2,1), pch=c(1,2,NA), col=c(1,1,2))
plot(range(smplst), c(0.99, 1.9), ylab="sample/true", xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=1, lty=3)
smpsq<-exp(seq(log(2), log(1000), length=1000))
lines(smpsq, cov(dat)[2]*(1/smpsq), lty=1, col=2, lwd=2)
lines(smplst, S_est/S_true, pch=1, lty=1, type="b")
lines(smplst, C_est/C_true, pch=2, lty=2, type="b")
legend("topright", c(expression(italic(paste("S"))),expression(paste(italic("C"))), expression(paste("Cov", "/", italic(N)))), bty="n", lty=c(1,2,1), pch=c(1,2,NA), col=c(1,1,2))
plot(range(smplst), c(0.99, 1.09), ylab="sample/true", xlab=expression(italic(paste("N"))), type="n", log="x")
abline(h=1, lty=3)
smpsq<-exp(seq(log(2), log(1000), length=1000))
lines(smpsq, cov(dat)[2]*(1/smpsq), lty=1, col=2, lwd=2)
lines(smplst, S_est/S_true, pch=1, lty=1, type="b")
lines(smplst, C_est/C_true, pch=2, lty=2, type="b")
legend("topright", c(expression(italic(paste("S"))),expression(paste(italic("C"))), expression(paste("Cov", "/", italic(N)))), bty="n", lty=c(1,2,1), pch=c(1,2,NA), col=c(1,1,2))
cov(dat)[2]*(1/smpsq)
(S_true+cov(dat)[2]*(1/smpsq))/S_true
lines(smpsq,(S_true+cov(dat)[2]*(1/smpsq))/S_true, lty=1, col=2, lwd=2)
cov(dat)[2]*(1/2)
S_est[1]-S_true[1]
C_est[1]-C_est[2]
S_true
lines(smpsq,(C_true+cov(dat)[2]*(1/smpsq))/C_true, lty=1, col=2, lwd=2)
#!/usr/bin/env Rscript
setwd("~/Dropbox/GitProjects/SimNet/src/cdr_tradeoff/")
rm(list=ls())
#load packages
require(parallel) #parallelize calculations
require(lmodel2) #fit bivariate major axis regressions
require(mvtnorm) #calculate multivariate normal distribution
require(plot3D) #make tradeoff plots
require(lme4) #fit trait values from data
require(data.table) #for reforming data
require(RColorBrewer) #for mixing palettes
#Load C functions
if(!sum(grep("getbmest.so", dir()))>0) {
system("R CMD SHLIB getbmest.c")
}
#load site and model data
load("data/simulated_results_coex.RData")
#set up simulations
centermeans<-TRUE #center to true E120 monoculture means?
nrep<-1000 #number of iterations for nonparametric analyses
adjustS<-TRUE #use 1994 total soil C to adjust among-plot variability?
nrep_traits<-1000 #number of iterations for testing within-species trait variation. If 1, then mean values are used
usetr<-TRUE #snap species to tradeoff surface
#run simulation
pdf("figures/cdr_tradeoff_community.pdf", width=8, height=4, colormodel = "cmyk", useDingbats = FALSE)
source("simulate_communities.R")
dev.off()
#run simulation
pdf("figures/cdr_tradeoff_community.pdf", width=8, height=4, colormodel = "cmyk", useDingbats = FALSE)
source("simulate_communities.R")
dev.off()
ls()
lst<-ls()
for(i in 1:length(lst)) {print(i); print(object.size(lst[i]))}
ls()
object.size(zrng)
object.size("zrng")
object.size("tradeoffdat")
object.size(tradeoffdat)
abmi
tmp<-numeric(length(lst)); for(i in 1:length(lst)) {print(i); print(tmp[i]<-object.size(noquote(lst[i])))}
tmp
object.size(noquote(lst[i]))
object.size(ls())
object.size(ls()[1])
object.size(ls()[2])
ls()
object.size(ls()[194])
object.size(tradeoffdat)
object.size(noquote(lst[i])))
paste("object.size(", noquote(list[i]), ")")
i<-=1
i<-1
paste("object.size(", noquote(lst[i]), ")")
paste("object.size(", noquote(lst[i]), ")", sep="")
eval(parse(text = paste("object.size(", noquote(lst[i]), ")", sep="")))
tmp<-numeric(length(lst))
for(i in 1:length(lst)) {
print(i)
print(tmp[i]<-eval(parse(text = paste("object.size(", noquote(lst[i]), ")", sep=""))))
}
tmp
order(tmp)
tmp[order(tmp)]
rev(order(tmp))
lst[rev(order(tmp))]
rm(ssoutlst)
object.size(simdatout)
#set up simulations
centermeans<-TRUE #center to true E120 monoculture means?
nrep<-10; #nrep<-1000 #number of iterations for nonparametric analyses
adjustS<-TRUE #use 1994 total soil C to adjust among-plot variability?
nrep_traits<-10 ##nrep_traits<-1000 #number of iterations for testing within-species trait variation. If 1, then mean values are used
usetr<-TRUE #snap species to tradeoff surface
source("simulate_communities.R")
lst[rev(order(tmp))][1:10]
lst<-ls()
tmp<-numeric(length(lst))
for(i in 1:length(lst)) {
print(i)
print(tmp[i]<-eval(parse(text = paste("object.size(", noquote(lst[i]), ")", sep=""))))
}
lst[rev(order(tmp))][1:10]
object.size(pardat)
#load site and model data
load("data/simulated_results_coex.RData")
lst<-ls()
tmp<-numeric(length(lst))
for(i in 1:length(lst)) {
print(i)
print(tmp[i]<-eval(parse(text = paste("object.size(", noquote(lst[i]), ")", sep=""))))
}
lst[rev(order(tmp))][1:10]
rm(ssoutlst)
source("simulate_communities.R")
#set up simulations
centermeans<-TRUE #center to true E120 monoculture means?
nrep<-10; #nrep<-1000 #number of iterations for nonparametric analyses
adjustS<-TRUE #use 1994 total soil C to adjust among-plot variability?
nrep_traits<-10 ##nrep_traits<-1000 #number of iterations for testing within-species trait variation. If 1, then mean values are used
usetr<-TRUE #snap species to tradeoff surface
source("simulate_communities.R")
lst[rev(order(tmp))][1:10]
rm(pardat)
source("simulate_communities.R")
rm(datlowN)
source("simulate_communities.R")
save.image("data/simulated_results_coex.RData")
#!/usr/bin/env Rscript
setwd("~/Dropbox/GitProjects/SimNet/src/cdr_tradeoff/")
rm(list=ls())
############################################################
# set up for simulations
############################################################
#load packages
require(parallel) #parallelize calculations
require(lmodel2) #fit bivariate major axis regressions
require(mvtnorm) #calculate multivariate normal distribution
require(plot3D) #make tradeoff plots
require(lme4) #fit trait values from data
require(data.table) #for reforming data
require(RColorBrewer) #for mixing palettes
#Load C functions
if(!sum(grep("getbmest.so", dir()))>0) {
system("R CMD SHLIB getbmest.c")
}
#load site and model data
load("data/simulated_results_coex.RData")
#set up simulations
centermeans<-TRUE #center to true E120 monoculture means?
nrep<-10; #nrep<-1000 #number of iterations for nonparametric analyses
adjustS<-TRUE #use 1994 total soil C to adjust among-plot variability?
nrep_traits<-10 ##nrep_traits<-1000 #number of iterations for testing within-species trait variation. If 1, then mean values are used
usetr<-TRUE #snap species to tradeoff surface
source("simulate_communities.R")
#set up simulations
centermeans<-TRUE #center to true E120 monoculture means?
nrep<-1000 #number of iterations for nonparametric analyses
adjustS<-TRUE #use 1994 total soil C to adjust among-plot variability?
nrep_traits<-1000 #number of iterations for testing within-species trait variation. If 1, then mean values are used
usetr<-TRUE #snap species to tradeoff surface
source("simulate_communities.R")
